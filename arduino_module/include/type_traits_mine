/**
 * @name type_traits
 * @author Benedict R. Gaster
 * @license See LICENSE.txt
 * @description Basic implementation of C++ <type_taits>
 *
 * Currently, I've only implement what is needed for the implementation
 * of <tuple>, although still missing std::forward and std::move, which can
 * be easily added to support rvalues correctly in tuple implementation.
 *
 * Sadly, there is currently no port of the libc++ to AVR and as I needed some
 * the basic functionlity it is implemented here.
 * 
 * A more robust implementation would check that we are actually indexing by
 * an intergral type and so on, but this will do for now.
 */
#pragma once

namespace std {

// helpers
template <class T, T v> struct integral_constant {};

typedef integral_constant<bool, true>  true_type;   // C++11
typedef integral_constant<bool, false> false_type;  // C++11

template <bool B>                                   // C++14
using bool_constant = integral_constant<bool, B>;   // C++14
typedef bool_constant<true> true_type;              // C++14
typedef bool_constant<false> false_type;            // C++14

// helper traits
template <bool, class T = void> struct enable_if;
template <bool, class T, class F> struct conditional;

/// Relationships between types:
template <class T, class U> struct is_same;
template <class Base, class Derived> struct is_base_of;
template <class From, class To> struct is_convertible;

// See C++14 20.10.6, type relations
//template <class T, class U> constexpr bool is_same_v
//      = is_same<T, U>::value;                                    // C++17

// is_same

template <class _Tp, class _Up>
struct is_same           : public false_type {};

template <class _Tp>
struct is_same<_Tp, _Tp> : public true_type {};

//template <class _Tp, class _Up> constexpr bool is_same_v
//    = is_same<_Tp, _Up>::value;

template <class T> struct remove_reference;

// reference modifications:
template <class T>	
using remove_reference_t  = typename remove_reference<T>::type;  // C++14

// remove_reference

template <class _Tp>
struct remove_reference
{
    typedef _Tp type;
};

template <class _Tp>
struct remove_reference<_Tp&>
{
    typedef _Tp type;
};

template <class _Tp> struct remove_reference<_Tp&&>
{
    typedef _Tp type;
};

template <class _Tp> using remove_reference_t =
    typename remove_reference<_Tp>::type;

}; // namespace std
